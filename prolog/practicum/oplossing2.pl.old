% Li Quan
% 1e master cw
% practicum
:- ensure_loaded(opgave).

bord(B) :- 
	B = [ (1,1,eiland(2)), (1,2,_), (1,3,eiland(2)), 
		  (2,1,_),         (2,2,_), (2,3,_), 
		  (3,1,eiland(2)), (3,2,_), (3,3,eiland(2))
		 ].

hashi(B) :-
	zoek_vrij(B,Vrij),
	zoek_eiland(B,Eilanden),
	foreach(member((R,K),Vrij) ,   (memberchk((R,K,brug(_,_)),B))),
	foreach(member(Eil, Eilanden), eiland_bruggen(Eil, B)).

zoek_vrij(B,L) :-
	findall((R,K),
		(member((R,K,X),B), var(X)),
		L).

zoek_eiland(B,L) :-
	findall((R,K,X), 
		 (member((R,K,X),B) , nonvar(X), X = eiland(_)),
		 L).

eiland_bruggen((R,K,eiland(X)),B) :-
	findall( Waarde, (zoek_buren(R,K,B,Lijst), member( (_,_,brug(Richting,Waarde)),Lijst)), Result),
	sumlist(Result,Som), 
	Som = X. 

zoek_buren(R,K,B,Lijst) :-
	zoek_horiz_buren(R,K,B,Lijst1),
	zoek_vert_buren(R,K,B,Lijst2),
	Lijst = [Lijst1|Lijst2].
		
zoek_horiz_buren(R,K,B,Lijst) :-
	findall((R,K1,I), 
			((K1 is K-1 ; K1 is K+1), memberchk((R,K1,I),B)),
			Lijst).
			
zoek_vert_buren(R,K,B,Lijst) :-
	findall((R1,K,I), 
			((R1 is R-1 ; R1 is R+1), memberchk((R1,K,I),B)),
			Lijst).
		
